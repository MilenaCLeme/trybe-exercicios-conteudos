// Operadores de Comparação;
// Operador $lt  - menor do que 
db.inventory.find({ qty: { $lt: 20 } });

// Operador $lte -  menor ou igual
db.inventory.find({ qty: { $lte: 20 } });

// Operador $gt -  maior do que
db.inventory.find({ qty: { $gt: 20 } });

// Operador $gte - maior ou igual
db.inventory.find({ qty: { $gte: 20 } });

// Operador $eq - igual
db.inventory.find({ qty: { $eq: 20 } });
//Podendo ser realizado desta forma , não existe diferença de performace 
db.inventory.find({ qty: 20 });

// Operador $ne - não é igual 
db.inventory.find({ qty: { $ne: 20 } });

// Operador $in - atributo qty é 5 ou 15 
db.inventory.find({ qty: { $in: [ 5, 15 ] } });

// Operador $nin - atributo filtrado não é igual ao especificado no array
db.inventory.find( { qty: { $nin: [ 5, 15 ] } } );

// Vamos praticar !

// Para confirmar que está tudo funcionando, rode o seguinte comando:
db.restaurants.count();
// O valor retornado deve ser 60 
// Selecione e faça a contagem dos restaurantes presentes nos bairros Queens , Staten Island e Bronx . (utilizando o atributo borough )
db.restaurants.find({ borough: { $in: ["Queens", "Staten Island", "Bronx"] } }).count();

// Selecione e faça a contagem dos restaurantes que não possuem culinária do tipo American . (utilizando o atributo cuisine )
db.restaurants.find({ cuisine: { $ne: "American" } }).count();

// Selecione e faça a contagem dos restaurantes que possuem avaliação maior ou igual a 8 . (utilizando o atributo rating )
db.restaurants.find({ rating: { $gte: 8 } }).count();

// Selecione e faça a contagem dos restaurantes que possuem avaliação menor que 4 .
db.restaurants.find({ rating: { $lt: 4 } }).count();

//Selecione e faça a contagem dos restaurantes que não possuem as avaliações 5 , 6 e 7 .
db.restaurants.find({rating: {$nin: [5, 6, 7]}}).count();

// Operadores Lógicos
// Operador $not peração lógica de NEGAÇÃO no < operador ou expressão > 
db.inventory.find({ price: { $not: { $gt: 1.99 } } });

// Operador $or operação lógica OU em um array de uma ou mais expressões e seleciona os documentos que satisfaçam ao menos uma das expressões
db.inventory.find({ $or: [{ qty: { $lt: 20 } }, { price: 10 }] });

// Operador $nor  operação lógica de NEGAÇÃO , porém, em um array de uma ou mais expressões, e seleciona os documentos em que todas essas expressões falhem 
db.inventory.find({ $nor: [{ price: 1.99 }, { sale: true }] });

//Operador $and  executa a operação lógica E num array
db.inventory.find({
and: [
        { price: { $ne: 1.99 } },
        { price: { $exists: true } }
    ]
})

// Vamos praticar !
// Faça os desafios de 1 a 5 abaixo, sobre os operadores lógicos utilizando a coleção restaurants criada no tópico anterior.
// 1- Selecione e faça a contagem dos restaurantes que não possuem avaliação menor ou igual a 5 , essa consulta também deve retornar restaurantes que não possuem o campo avaliação.
db.restaurants.find({ rating: { $not: { $lte: 5 } } }).count();

// 2- Selecione e faça a contagem dos restaurantes em que a avaliação seja maior ou igual a 6 , ou restaurantes localizados no bairro Brooklyn .
db.restaurants.find({ $or: [{ rating: { $gte: 6 } }, { borough: "Brooklyn" }] }).count();

// 3 - Selecione e faça a contagem dos restaurantes localizados nos bairros Queens , Staten Island e Brooklyn e possuem avaliação maior que 4 .
db.restaurants.find({ $and: [{ borough: { $in: ["Queens", "Staten Island", "Brooklyn"] } }, { rating: { $gt: 4 } }] }).count();

// 4- Selecione e faça a contagem dos restaurantes onde nem o campo avaliação seja igual a 1 , nem o campo culinária seja do tipo American .
db.restaurants.find({ $nor: [{ rating: 1 }, { cuisine: "American" }] }).count();

//Selecione e faça a contagem dos resturantes em que a avaliação seja maior que 6 ou menor que 10 , E esteja localizado no bairro Brooklyn OU não possuem culinária do tipo Delicatessen .
db.restaurants.find({$and: [{$or: [{rating: {$gt: 6}}, {rating: {$lt: 10}}]}, {$or: [{borough: "Brooklyn"}, {cuisine: "Delicatessen"}]}]}).count();

// Operador $exists Quando o <boolean> é verdadeiro ( true ), o operador $exists encontra os documentos que contêm o atributo , incluindo os documentos em que o valor do atributo é igual a null
db.inventory.find({ qty: { $exists: true } });

// Você também pode combinar operadores, como no exemplo abaixo
db.inventory.find({ qty: { $exists: true, $nin: [ 5, 15 ] } });

// Método sort() 1 ASC -1 DESC
db.colecao.find().sort({ "campo": "1 ou -1"})

// Ele pode ser combinado com o método find() 
db.example.find({}, { value, name }).sort({ value: -1 }, { name: 1 })

// Vamos praticar !
// Faça os desafios 1 e 2 abaixo sobre o sort() utilizando a coleção restaurants criada anteriormente.
// 1 - Ordene alfabeticamente os restaurantes pelo nome (atributo name )
db.restaurants.find({}).sort({name: 1});

// 2 - Ordene os restaurantes de forma descrescente baseado nas avaliações
db.restaurants.find({}).sort({rating: -1});

// Removendo documentos
// deleteOne() apenas o primeiro item; 
db.inventory.deleteOne({ status: "D" });

// deleteMany() todos que possuem essa operacao; 
db.inventory.deleteMany({ status : "A" })
// para remover todos; 
db.inventory.deleteMany({});

// Vamos praticar !
// Faça os desafios 1 e 2 abaixo, sobre remoção de documentos utilizando a coleção restaurants criada anteriormente.
// 1- Remova o primeiro restaurante que possua culinária do tipo Ice Cream, Gelato, Yogurt, Ices .
db.restaurants.deleteOne({cuisine: {$in: ["Ice Cream", "Gelato", "Yogurt", "Ices"]}});

// 2 - Remova todos os restaurantes que possuem culinária do tipo American
db.restaurants.deleteMany({cuisine: "American"});

// Bora treinar tudo!
// Criando um novo banco de dados

use aula-filter-operators

db.filmes.insertMany(
  [
    { "titulo": "O Planeta dos Macacos", "ano": 1968, "diretor": "Franklin J", "avaliacao": { "bom": 5, "medio": 6, "ruim": 4 } },
    { "titulo": "2001 - Uma OdissÃ©ia no EspaÃ§o", "ano": 1968, "diretor": "Stanley Kubrick", "avaliacao": { "bom": 6, "medio": 4, "ruim": 9 } },
    { "titulo": "John Carter: Entre Dois Mundos", "ano": 1968, "diretor": "Franklin J", "avaliacao": { "bom": 9, "medio": 10, "ruim": 4 } },
    { "titulo": "O Senhor dos AnÃ©is", "ano": 2001, "diretor": "Peter Jackson", "avaliacao": { "bom": 7, "medio": 9, "ruim": 5 } },
    { "titulo": "CÃ£es de Aluguel", "ano": 1993, "diretor": "Quentin Tarantino", "avaliacao": { "bom": 2, "medio": 7, "ruim": 4 } },
    { "titulo": "Psicopata Americano", "ano": 2000, "diretor": "Mary Harron", "avaliacao": { "bom": 7, "medio": 2, "ruim": 5 } },
    { "titulo": "Interestelar", "ano": 2014, "diretor": "Christopher Nolan", "avaliacao": { "bom": 8, "medio": 8, "ruim": 1 } },
    { "titulo": "Transformers: The Last Knight", "ano": 2017, "diretor": "Michael Bay", "avaliacao": { "bom": 9, "medio": 4, "ruim": 3 } },
    { "titulo": "Os MercenÃ¡rios", "ano": 2010, "diretor": "sylvester Stallone", "avaliacao": { "bom": 7, "medio": 4, "ruim": 10 } },
    { "titulo": "Kill Bill", "ano": 2003, "diretor": "Quentin Tarantino", "avaliacao": { "bom": 4, "medio": 2, "ruim": 2 } },
    { "titulo": "Planeta Terror", "ano": 2007, "diretor": "Robert Rodriguez", "avaliacao": { "bom": 7, "medio": 6, "ruim": 6 } },
    { "titulo": "A Pele que Habito", "ano": 2011, "diretor": "Pedro Almodovar", "avaliacao": { "bom": 3, "medio": 4, "ruim": 3 } },
    { "titulo": "Um Drink no Inferno", "ano": 1996, "diretor": "Quentin Tarantino", "avaliacao": { "bom": 6, "medio": 7, "ruim": 6 } },
    { "titulo": "Pulp Fiction", "ano": 1995, "diretor": "Quentin Tarantino", "avaliacao": { "bom": 7, "medio": 2, "ruim": 1 } },
    { "titulo": "Django Livre", "ano": 2013, "diretor": "Quentin Tarantino", "avaliacao": { "bom": 2, "medio": 1, "ruim": 2 } },
    { "titulo": "O Poderoso ChefÃ£o", "ano": 1972, "diretor": "Francis Ford Coppola", "avaliacao": { "bom": 4, "medio": 7, "ruim": 6 } },
    { "titulo": "Matrix", "ano": 1999, "diretor": "Andy Wachowski", "avaliacao": { "bom": 2, "medio": 10, "ruim": 4 } },
    { "titulo": "Medianeras", "ano": 2011, "diretor": "gustavo Taretto", "avaliacao": { "bom": 7, "medio": 5, "ruim": 10 } },
    { "titulo": "Os Oito Odiados", "ano": 2016, "diretor": "Quentin Tarantino", "avaliacao": { "bom": 6, "medio": 10, "ruim": 7 } },
    { "titulo": "Na Natureza Selvagem", "ano": 2008, "diretor": "Sean Penn", "avaliacao": { "bom": 3, "medio": 4, "ruim": 5 } },
    { "titulo": "Sobre Meninos e Lobos", "ano": 2003, "diretor": "Clint Eastwood", "avaliacao": { "bom": 3, "medio": 7, "ruim": 10 } },
    { "titulo": "Batman: O Cavaleiro das Trevas", "ano": 2008, "diretor": "Christopher Nolan", "avaliacao": { "bom": 6, "medio": 9, "ruim": 5 } },
    { "titulo": "Batman vs Superman: A Origem da JustiÃ§a", "ano": 2016, "diretor": "Zack Snyder", "avaliacao": { "bom": 2, "medio": 2, "ruim": 6 } },
    { "titulo": "O predestinado", "ano": 2015, "diretor": "Michael Spierig", "avaliacao": { "bom": 5, "medio": 2, "ruim": 8 } },
    { "titulo": "Harry Potter e o Prisioneiro de Azkaban", "ano": 2004, "diretor": "J.K. Rowling", "avaliacao": { "bom": 5, "medio": 7, "ruim": 1 } },
    { "titulo": "Animais FantÃ¡sticos e Onde Habitam", "ano": 2016, "diretor": "J.K. Rowling", "avaliacao": { "bom": 8, "medio": 2, "ruim": 5 } },
    { "titulo": "Harry Potter e as RelÃ­quias da Morte:Parte 2", "ano": 2011, "diretor": "J.K. Rowling", "avaliacao": { "bom": 7, "medio": 4, "ruim": 3 } },
    { "titulo": "Harry Potter e a CÃ¢mara Secreta", "ano": 2002, "diretor": "J.K. Rowling", "avaliacao": { "bom": 8, "medio": 7, "ruim": 3 } },
    { "titulo": "Alice no PaÃ­s das Maravilhas", "ano": 2010, "diretor": "Tim Burton", "avaliacao": { "bom": 1, "medio": 7, "ruim": 3 } },
    { "titulo": "Harry Potter e o CÃ¡lice de Fogo", "ano": 2005, "diretor": "J.K. Rowling", "avaliacao": { "bom": 10, "medio": 6, "ruim": 2 } },
    { "titulo": "A Lista de Schindler", "ano": 1993, "diretor": "Steven Spielberg", "avaliacao": { "bom": 9, "medio": 7, "ruim": 2 } },
    { "titulo": "Harry Potter e as RelÃ­quias da Morte:Parte 1", "ano": 2010, "diretor": "J.K. Rowling", "avaliacao": { "bom": 4, "medio": 3, "ruim": 7 } },
    { "titulo": "Harry Potter e a Pedra Filosofal", "ano": 2001, "diretor": "J.K. Rowling", "avaliacao": { "bom": 6, "medio": 5, "ruim": 9 } },
    { "titulo": "Indiana Jones e a Ãšltima Cruzada", "ano": 1989, "diretor": "Steven Spielberg", "avaliacao": { "bom": 4, "medio": 3, "ruim": 4 } },
    { "titulo": "Harry Potter e o Enigma do PrÃ­ncipe", "ano": 2009, "diretor": "J.K. Rowling", "avaliacao": { "bom": 1, "medio": 3, "ruim": 6 } },
    { "titulo": "Band of Brothers", "ano": 2001, "diretor": "Steven Spielberg", "avaliacao": { "bom": 5, "medio": 8, "ruim": 8 } },
    { "titulo": "Harry Potter e a Ordem da FÃªnix", "ano": 2007, "diretor": "J.K. Rowling", "avaliacao": { "bom": 9, "medio": 5, "ruim": 7 } }
  ]
);

// Para confirmar que está tudo funcionando, rode o seguinte comando:
db.filmes.find().count();
// Deve retornar o valor 37, que é o número de filmes dentro desse banco de dados.

// Apagando um banco de dados após fazer alterações
//Exclua o banco de dados em que você fez as alterações, com o comando:
db.dropDatabase();